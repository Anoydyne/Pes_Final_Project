/*
 * cbfifo.h - a fixed-size FIFO implemented via a circular buffer
 * 
 * Author: Howdy Pierce, howdy.pierce@colorado.edu
 * 
 * DO NOT EDIT THIS FILE: You should check this file into your repo
 * exactly as it was delivered to you.
 */

#ifndef _CBFIFO_H_
#define _CBFIFO_H_

/***********************************************************
 * File includes here
 ***********************************************************/
#include <stdlib.h>  // for size_t
#include <stdbool.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <MKL25Z4.H>

/************************************************************
 * Declaring enum for two types of cbfifo
 *************************************************************/

typedef enum fifo_buffers {
	transmitter = 0,
	receiver = 1
} fifo_type;

/*
 * Enqueues data onto the FIFO, up to the limit of the available FIFO
 * capacity.
 *
 * Parameters:
 *   buf      Pointer to the data
 *   nbyte    Max number of bytes to enqueue
 * 
 * Returns:
 *   The number of bytes actually enqueued, which could be 0. In case
 * of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(void *buf, size_t nbyte, uint32_t command_type);

/*
 * Attempts to remove ("dequeue") up to nbyte bytes of data from the
 * FIFO. Removed data will be copied into the buffer pointed to by buf.
 *
 * Parameters:
 *   buf      Destination for the dequeued data
 *   nbyte    Bytes of data requested
 * 
 * Returns:
 *   The number of bytes actually copied, which will be between 0 and
 * nbyte. 
 * 
 * To further explain the behavior: If the FIFO's current length is 24
 * bytes, and the caller requests 30 bytes, cbfifo_dequeue should
 * return the 24 bytes it has, and the new FIFO length will be 0. If
 * the FIFO is empty (current length is 0 bytes), a request to dequeue
 * any number of bytes will result in a return of 0 from
 * cbfifo_dequeue.
 */
size_t cbfifo_dequeue(void *buf, size_t nbyte, uint32_t command_type);

/*
 * Returns the number of bytes currently on the FIFO. 
 *
 * Parameters:
 *   none
 * 
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO
 */
size_t cbfifo_length(uint32_t command_type);

/*
 * Returns the FIFO's capacity
 *
 * Parameters:
 *   none
 * 
 * Returns:
 *   The capacity, in bytes, for the FIFO
 */
size_t cbfifo_capacity(uint32_t command_type);

/*************************************************************************************************************
 *
 * Name :	void cbfifo_reset(uint32_t command_type);
 *
 * Description :	resets cbfifo
 *
 * Inputs: command_type- The buffer(transmitter/receiver) which has to be reset
 *
 * Return: None
 *************************************************************************************************************/
void cbfifo_reset(uint32_t command_type);
#endif // _CBFIFO_H_
